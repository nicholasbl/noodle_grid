use colabrodo_server::{server::*, server_bufferbuilder::*, server_messages::*};
use nalgebra_glm as glm;

const SPHERE_POS: [[f32; 3]; 162] = [
    [0.000000, -1.000000, 0.000000],
    [0.723607, -0.447220, 0.525725],
    [-0.276388, -0.447220, 0.850649],
    [-0.894426, -0.447216, 0.000000],
    [-0.276388, -0.447220, -0.850649],
    [0.723607, -0.447220, -0.525725],
    [0.276388, 0.447220, 0.850649],
    [-0.723607, 0.447220, 0.525725],
    [-0.723607, 0.447220, -0.525725],
    [0.276388, 0.447220, -0.850649],
    [0.894426, 0.447216, 0.000000],
    [0.000000, 1.000000, 0.000000],
    [-0.232822, -0.657519, 0.716563],
    [-0.162456, -0.850654, 0.499995],
    [-0.077607, -0.967950, 0.238853],
    [0.203181, -0.967950, 0.147618],
    [0.425323, -0.850654, 0.309011],
    [0.609547, -0.657519, 0.442856],
    [0.531941, -0.502302, 0.681712],
    [0.262869, -0.525738, 0.809012],
    [-0.029639, -0.502302, 0.864184],
    [0.812729, -0.502301, -0.295238],
    [0.850648, -0.525736, 0.000000],
    [0.812729, -0.502301, 0.295238],
    [0.203181, -0.967950, -0.147618],
    [0.425323, -0.850654, -0.309011],
    [0.609547, -0.657519, -0.442856],
    [-0.753442, -0.657515, 0.000000],
    [-0.525730, -0.850652, 0.000000],
    [-0.251147, -0.967949, 0.000000],
    [-0.483971, -0.502302, 0.716565],
    [-0.688189, -0.525736, 0.499997],
    [-0.831051, -0.502299, 0.238853],
    [-0.232822, -0.657519, -0.716563],
    [-0.162456, -0.850654, -0.499995],
    [-0.077607, -0.967950, -0.238853],
    [-0.831051, -0.502299, -0.238853],
    [-0.688189, -0.525736, -0.499997],
    [-0.483971, -0.502302, -0.716565],
    [-0.029639, -0.502302, -0.864184],
    [0.262869, -0.525738, -0.809012],
    [0.531941, -0.502302, -0.681712],
    [0.956626, 0.251149, 0.147618],
    [0.951058, -0.000000, 0.309013],
    [0.860698, -0.251151, 0.442858],
    [0.860698, -0.251151, -0.442858],
    [0.951058, 0.000000, -0.309013],
    [0.956626, 0.251149, -0.147618],
    [0.155215, 0.251152, 0.955422],
    [0.000000, -0.000000, 1.000000],
    [-0.155215, -0.251152, 0.955422],
    [0.687159, -0.251152, 0.681715],
    [0.587786, 0.000000, 0.809017],
    [0.436007, 0.251152, 0.864188],
    [-0.860698, 0.251151, 0.442858],
    [-0.951058, -0.000000, 0.309013],
    [-0.956626, -0.251149, 0.147618],
    [-0.436007, -0.251152, 0.864188],
    [-0.587786, 0.000000, 0.809017],
    [-0.687159, 0.251152, 0.681715],
    [-0.687159, 0.251152, -0.681715],
    [-0.587786, -0.000000, -0.809017],
    [-0.436007, -0.251152, -0.864188],
    [-0.956626, -0.251149, -0.147618],
    [-0.951058, 0.000000, -0.309013],
    [-0.860698, 0.251151, -0.442858],
    [0.436007, 0.251152, -0.864188],
    [0.587786, -0.000000, -0.809017],
    [0.687159, -0.251152, -0.681715],
    [-0.155215, -0.251152, -0.955422],
    [0.000000, 0.000000, -1.000000],
    [0.155215, 0.251152, -0.955422],
    [0.831051, 0.502299, 0.238853],
    [0.688189, 0.525736, 0.499997],
    [0.483971, 0.502302, 0.716565],
    [0.029639, 0.502302, 0.864184],
    [-0.262869, 0.525738, 0.809012],
    [-0.531941, 0.502302, 0.681712],
    [-0.812729, 0.502301, 0.295238],
    [-0.850648, 0.525736, 0.000000],
    [-0.812729, 0.502301, -0.295238],
    [-0.531941, 0.502302, -0.681712],
    [-0.262869, 0.525738, -0.809012],
    [0.029639, 0.502302, -0.864184],
    [0.483971, 0.502302, -0.716565],
    [0.688189, 0.525736, -0.499997],
    [0.831051, 0.502299, -0.238853],
    [0.077607, 0.967950, 0.238853],
    [0.162456, 0.850654, 0.499995],
    [0.232822, 0.657519, 0.716563],
    [0.753442, 0.657515, 0.000000],
    [0.525730, 0.850652, 0.000000],
    [0.251147, 0.967949, 0.000000],
    [-0.203181, 0.967950, 0.147618],
    [-0.425323, 0.850654, 0.309011],
    [-0.609547, 0.657519, 0.442856],
    [-0.203181, 0.967950, -0.147618],
    [-0.425323, 0.850654, -0.309011],
    [-0.609547, 0.657519, -0.442856],
    [0.077607, 0.967950, -0.238853],
    [0.162456, 0.850654, -0.499995],
    [0.232822, 0.657519, -0.716563],
    [0.361800, 0.894429, -0.262863],
    [0.638194, 0.723610, -0.262864],
    [0.447209, 0.723612, -0.525728],
    [-0.138197, 0.894430, -0.425319],
    [-0.052790, 0.723612, -0.688185],
    [-0.361804, 0.723612, -0.587778],
    [-0.447210, 0.894429, 0.000000],
    [-0.670817, 0.723611, -0.162457],
    [-0.670817, 0.723611, 0.162457],
    [-0.138197, 0.894430, 0.425319],
    [-0.361804, 0.723612, 0.587778],
    [-0.052790, 0.723612, 0.688185],
    [0.361800, 0.894429, 0.262863],
    [0.447209, 0.723612, 0.525728],
    [0.638194, 0.723610, 0.262864],
    [0.861804, 0.276396, -0.425322],
    [0.809019, 0.000000, -0.587782],
    [0.670821, 0.276397, -0.688189],
    [-0.138199, 0.276397, -0.951055],
    [-0.309016, -0.000000, -0.951057],
    [-0.447215, 0.276397, -0.850649],
    [-0.947213, 0.276396, -0.162458],
    [-1.000000, 0.000001, 0.000000],
    [-0.947213, 0.276397, 0.162458],
    [-0.447216, 0.276397, 0.850648],
    [-0.309017, -0.000001, 0.951056],
    [-0.138199, 0.276397, 0.951055],
    [0.670820, 0.276396, 0.688190],
    [0.809019, -0.000002, 0.587783],
    [0.861804, 0.276394, 0.425323],
    [0.309017, -0.000000, -0.951056],
    [0.447216, -0.276398, -0.850648],
    [0.138199, -0.276398, -0.951055],
    [-0.809018, -0.000000, -0.587783],
    [-0.670819, -0.276397, -0.688191],
    [-0.861803, -0.276396, -0.425324],
    [-0.809018, 0.000000, 0.587783],
    [-0.861803, -0.276396, 0.425324],
    [-0.670819, -0.276397, 0.688191],
    [0.309017, 0.000000, 0.951056],
    [0.138199, -0.276398, 0.951055],
    [0.447216, -0.276398, 0.850648],
    [1.000000, 0.000000, 0.000000],
    [0.947213, -0.276396, 0.162458],
    [0.947213, -0.276396, -0.162458],
    [0.361803, -0.723612, -0.587779],
    [0.138197, -0.894429, -0.425321],
    [0.052789, -0.723611, -0.688186],
    [-0.447211, -0.723612, -0.525727],
    [-0.361801, -0.894429, -0.262863],
    [-0.638195, -0.723609, -0.262863],
    [-0.638195, -0.723609, 0.262864],
    [-0.361801, -0.894428, 0.262864],
    [-0.447211, -0.723610, 0.525729],
    [0.670817, -0.723611, -0.162457],
    [0.670818, -0.723610, 0.162458],
    [0.447211, -0.894428, 0.000001],
    [0.052790, -0.723612, 0.688185],
    [0.138199, -0.894429, 0.425321],
    [0.361805, -0.723611, 0.587779],
];

const SPHERE_INDEX: [[u32; 3]; 320] = [
    [0, 15, 14],
    [1, 17, 23],
    [0, 14, 29],
    [0, 29, 35],
    [0, 35, 24],
    [1, 23, 44],
    [2, 20, 50],
    [3, 32, 56],
    [4, 38, 62],
    [5, 41, 68],
    [1, 44, 51],
    [2, 50, 57],
    [3, 56, 63],
    [4, 62, 69],
    [5, 68, 45],
    [6, 74, 89],
    [7, 77, 95],
    [8, 80, 98],
    [9, 83, 101],
    [10, 86, 90],
    [92, 99, 11],
    [91, 102, 92],
    [90, 103, 91],
    [92, 102, 99],
    [102, 100, 99],
    [91, 103, 102],
    [103, 104, 102],
    [102, 104, 100],
    [104, 101, 100],
    [90, 86, 103],
    [86, 85, 103],
    [103, 85, 104],
    [85, 84, 104],
    [104, 84, 101],
    [84, 9, 101],
    [99, 96, 11],
    [100, 105, 99],
    [101, 106, 100],
    [99, 105, 96],
    [105, 97, 96],
    [100, 106, 105],
    [106, 107, 105],
    [105, 107, 97],
    [107, 98, 97],
    [101, 83, 106],
    [83, 82, 106],
    [106, 82, 107],
    [82, 81, 107],
    [107, 81, 98],
    [81, 8, 98],
    [96, 93, 11],
    [97, 108, 96],
    [98, 109, 97],
    [96, 108, 93],
    [108, 94, 93],
    [97, 109, 108],
    [109, 110, 108],
    [108, 110, 94],
    [110, 95, 94],
    [98, 80, 109],
    [80, 79, 109],
    [109, 79, 110],
    [79, 78, 110],
    [110, 78, 95],
    [78, 7, 95],
    [93, 87, 11],
    [94, 111, 93],
    [95, 112, 94],
    [93, 111, 87],
    [111, 88, 87],
    [94, 112, 111],
    [112, 113, 111],
    [111, 113, 88],
    [113, 89, 88],
    [95, 77, 112],
    [77, 76, 112],
    [112, 76, 113],
    [76, 75, 113],
    [113, 75, 89],
    [75, 6, 89],
    [87, 92, 11],
    [88, 114, 87],
    [89, 115, 88],
    [87, 114, 92],
    [114, 91, 92],
    [88, 115, 114],
    [115, 116, 114],
    [114, 116, 91],
    [116, 90, 91],
    [89, 74, 115],
    [74, 73, 115],
    [115, 73, 116],
    [73, 72, 116],
    [116, 72, 90],
    [72, 10, 90],
    [47, 86, 10],
    [46, 117, 47],
    [45, 118, 46],
    [47, 117, 86],
    [117, 85, 86],
    [46, 118, 117],
    [118, 119, 117],
    [117, 119, 85],
    [119, 84, 85],
    [45, 68, 118],
    [68, 67, 118],
    [118, 67, 119],
    [67, 66, 119],
    [119, 66, 84],
    [66, 9, 84],
    [71, 83, 9],
    [70, 120, 71],
    [69, 121, 70],
    [71, 120, 83],
    [120, 82, 83],
    [70, 121, 120],
    [121, 122, 120],
    [120, 122, 82],
    [122, 81, 82],
    [69, 62, 121],
    [62, 61, 121],
    [121, 61, 122],
    [61, 60, 122],
    [122, 60, 81],
    [60, 8, 81],
    [65, 80, 8],
    [64, 123, 65],
    [63, 124, 64],
    [65, 123, 80],
    [123, 79, 80],
    [64, 124, 123],
    [124, 125, 123],
    [123, 125, 79],
    [125, 78, 79],
    [63, 56, 124],
    [56, 55, 124],
    [124, 55, 125],
    [55, 54, 125],
    [125, 54, 78],
    [54, 7, 78],
    [59, 77, 7],
    [58, 126, 59],
    [57, 127, 58],
    [59, 126, 77],
    [126, 76, 77],
    [58, 127, 126],
    [127, 128, 126],
    [126, 128, 76],
    [128, 75, 76],
    [57, 50, 127],
    [50, 49, 127],
    [127, 49, 128],
    [49, 48, 128],
    [128, 48, 75],
    [48, 6, 75],
    [53, 74, 6],
    [52, 129, 53],
    [51, 130, 52],
    [53, 129, 74],
    [129, 73, 74],
    [52, 130, 129],
    [130, 131, 129],
    [129, 131, 73],
    [131, 72, 73],
    [51, 44, 130],
    [44, 43, 130],
    [130, 43, 131],
    [43, 42, 131],
    [131, 42, 72],
    [42, 10, 72],
    [66, 71, 9],
    [67, 132, 66],
    [68, 133, 67],
    [66, 132, 71],
    [132, 70, 71],
    [67, 133, 132],
    [133, 134, 132],
    [132, 134, 70],
    [134, 69, 70],
    [68, 41, 133],
    [41, 40, 133],
    [133, 40, 134],
    [40, 39, 134],
    [134, 39, 69],
    [39, 4, 69],
    [60, 65, 8],
    [61, 135, 60],
    [62, 136, 61],
    [60, 135, 65],
    [135, 64, 65],
    [61, 136, 135],
    [136, 137, 135],
    [135, 137, 64],
    [137, 63, 64],
    [62, 38, 136],
    [38, 37, 136],
    [136, 37, 137],
    [37, 36, 137],
    [137, 36, 63],
    [36, 3, 63],
    [54, 59, 7],
    [55, 138, 54],
    [56, 139, 55],
    [54, 138, 59],
    [138, 58, 59],
    [55, 139, 138],
    [139, 140, 138],
    [138, 140, 58],
    [140, 57, 58],
    [56, 32, 139],
    [32, 31, 139],
    [139, 31, 140],
    [31, 30, 140],
    [140, 30, 57],
    [30, 2, 57],
    [48, 53, 6],
    [49, 141, 48],
    [50, 142, 49],
    [48, 141, 53],
    [141, 52, 53],
    [49, 142, 141],
    [142, 143, 141],
    [141, 143, 52],
    [143, 51, 52],
    [50, 20, 142],
    [20, 19, 142],
    [142, 19, 143],
    [19, 18, 143],
    [143, 18, 51],
    [18, 1, 51],
    [42, 47, 10],
    [43, 144, 42],
    [44, 145, 43],
    [42, 144, 47],
    [144, 46, 47],
    [43, 145, 144],
    [145, 146, 144],
    [144, 146, 46],
    [146, 45, 46],
    [44, 23, 145],
    [23, 22, 145],
    [145, 22, 146],
    [22, 21, 146],
    [146, 21, 45],
    [21, 5, 45],
    [26, 41, 5],
    [25, 147, 26],
    [24, 148, 25],
    [26, 147, 41],
    [147, 40, 41],
    [25, 148, 147],
    [148, 149, 147],
    [147, 149, 40],
    [149, 39, 40],
    [24, 35, 148],
    [35, 34, 148],
    [148, 34, 149],
    [34, 33, 149],
    [149, 33, 39],
    [33, 4, 39],
    [33, 38, 4],
    [34, 150, 33],
    [35, 151, 34],
    [33, 150, 38],
    [150, 37, 38],
    [34, 151, 150],
    [151, 152, 150],
    [150, 152, 37],
    [152, 36, 37],
    [35, 29, 151],
    [29, 28, 151],
    [151, 28, 152],
    [28, 27, 152],
    [152, 27, 36],
    [27, 3, 36],
    [27, 32, 3],
    [28, 153, 27],
    [29, 154, 28],
    [27, 153, 32],
    [153, 31, 32],
    [28, 154, 153],
    [154, 155, 153],
    [153, 155, 31],
    [155, 30, 31],
    [29, 14, 154],
    [14, 13, 154],
    [154, 13, 155],
    [13, 12, 155],
    [155, 12, 30],
    [12, 2, 30],
    [21, 26, 5],
    [22, 156, 21],
    [23, 157, 22],
    [21, 156, 26],
    [156, 25, 26],
    [22, 157, 156],
    [157, 158, 156],
    [156, 158, 25],
    [158, 24, 25],
    [23, 17, 157],
    [17, 16, 157],
    [157, 16, 158],
    [16, 15, 158],
    [158, 15, 24],
    [15, 0, 24],
    [12, 20, 2],
    [13, 159, 12],
    [14, 160, 13],
    [12, 159, 20],
    [159, 19, 20],
    [13, 160, 159],
    [160, 161, 159],
    [159, 161, 19],
    [161, 18, 19],
    [14, 15, 160],
    [15, 16, 160],
    [160, 16, 161],
    [16, 17, 161],
    [161, 17, 18],
    [17, 1, 18],
];

pub fn make_sphere(server_state: &mut ServerState, color: glm::Vec3) -> GeometryReference {
    let verts: Vec<_> = SPHERE_POS
        .iter()
        .map(|f| {
            let v: glm::Vec3 = (*f).into();
            let n = glm::normalize(&v);
            VertexMinimal {
                position: *f,
                normal: n.into(),
            }
        })
        .collect();

    let index_list = IndexType::Triangles(&SPHERE_INDEX);

    let test_source = VertexSource {
        name: Some("Sphere".to_string()),
        vertex: verts.as_slice(),
        index: index_list,
    };

    // Create a material to go along with this cube
    let material = server_state.materials.new_component(ServerMaterialState {
        name: None,
        mutable: ServerMaterialStateUpdatable {
            pbr_info: Some(ServerPBRInfo {
                base_color: [color.x, color.y, color.z, 1.0],
                metallic: Some(1.0),
                roughness: Some(0.25),
                ..Default::default()
            }),
            double_sided: Some(true),
            ..Default::default()
        },
    });

    let pack = test_source.pack_bytes().unwrap();

    // Return a new mesh with this geometry/material
    test_source
        .build_geometry(
            server_state,
            BufferRepresentation::Bytes(pack.bytes),
            material,
        )
        .unwrap()
}

const CUBE_POS: &[[f32; 3]; 24] = &[
    [-0.5, 0.5, -0.5],
    [0.5, 0.5, 0.5],
    [0.5, 0.5, -0.5],
    [0.5, 0.5, 0.5],
    [-0.5, -0.5, 0.5],
    [0.5, -0.5, 0.5],
    [-0.5, 0.5, 0.5],
    [-0.5, -0.5, -0.5],
    [-0.5, -0.5, 0.5],
    [0.5, -0.5, -0.5],
    [-0.5, -0.5, 0.5],
    [-0.5, -0.5, -0.5],
    [0.5, 0.5, -0.5],
    [0.5, -0.5, 0.5],
    [0.5, -0.5, -0.5],
    [-0.5, 0.5, -0.5],
    [0.5, -0.5, -0.5],
    [-0.5, -0.5, -0.5],
    [-0.5, 0.5, 0.5],
    [-0.5, 0.5, 0.5],
    [-0.5, 0.5, -0.5],
    [0.5, -0.5, 0.5],
    [0.5, 0.5, 0.5],
    [0.5, 0.5, -0.5],
];

const CUBE_NOR: &[[f32; 3]; 24] = &[
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, -0.0, 1.0],
    [-0.0, -0.0, 1.0],
    [-0.0, -0.0, 1.0],
    [-1.0, -0.0, -0.0],
    [-1.0, -0.0, -0.0],
    [-1.0, -0.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [1.0, -0.0, -0.0],
    [1.0, -0.0, -0.0],
    [1.0, -0.0, -0.0],
    [-0.0, -0.0, -1.0],
    [-0.0, -0.0, -1.0],
    [-0.0, -0.0, -1.0],
    [-0.0, 1.0, -0.0],
    [-0.0, -0.0, 1.0],
    [-1.0, -0.0, -0.0],
    [-0.0, -1.0, -0.0],
    [1.0, -0.0, -0.0],
    [-0.0, -0.0, -1.0],
];

const CUBE_INDEX: &[[u32; 3]; 12] = &[
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [9, 10, 11],
    [12, 13, 14],
    [15, 16, 17],
    [0, 18, 1],
    [3, 19, 4],
    [6, 20, 7],
    [9, 21, 10],
    [12, 22, 13],
    [15, 23, 16],
];

fn transform_p(p: [f32; 3], tf: &glm::Mat4) -> [f32; 3] {
    let lp: glm::Vec3 = p.into();
    let lp = glm::vec4(lp.x, lp.y, lp.z, 1.0);
    let lp = tf * lp;
    (lp.xyz() / lp.w).into()
}

fn transform_n(p: [f32; 3], tf: &glm::Mat3) -> [f32; 3] {
    let lp: glm::Vec3 = p.into();
    let lp = (tf * lp).normalize();
    lp.into()
}

pub fn make_cube(
    server_state: &mut ServerState,
    tf: glm::Mat4,
    material: MaterialReference,
) -> GeometryReference {
    let normal_tf = glm::inverse_transpose(glm::mat4_to_mat3(&tf));

    let verts: Vec<_> = CUBE_POS
        .iter()
        .zip(CUBE_NOR)
        .map(|f| VertexMinimal {
            position: transform_p(*f.0, &tf),
            normal: transform_n(*f.1, &normal_tf),
        })
        .collect();

    let index_list = IndexType::Triangles(CUBE_INDEX);

    let test_source = VertexSource {
        name: Some("Cube".to_string()),
        vertex: verts.as_slice(),
        index: index_list,
    };

    let pack = test_source.pack_bytes().unwrap();

    // Return a new mesh with this geometry/material
    test_source
        .build_geometry(
            server_state,
            BufferRepresentation::Bytes(pack.bytes),
            material,
        )
        .unwrap()
}

const CYL_POS: &[[f32; 3]; 130] = &[
    [0.0, 0.5, -0.5],
    [0.097545, -0.5, -0.490393],
    [0.0, -0.5, -0.5],
    [0.097545, 0.5, -0.490393],
    [0.191342, -0.5, -0.46194],
    [0.191342, 0.5, -0.46194],
    [0.277785, -0.5, -0.415735],
    [0.277785, 0.5, -0.415735],
    [0.353553, -0.5, -0.353553],
    [0.353553, 0.5, -0.353553],
    [0.415735, -0.5, -0.277785],
    [0.415735, 0.5, -0.277785],
    [0.46194, -0.5, -0.191342],
    [0.46194, 0.5, -0.191342],
    [0.490393, -0.5, -0.097545],
    [0.490393, 0.5, -0.097545],
    [0.5, -0.5, -0.0],
    [0.5, 0.5, -0.0],
    [0.490393, -0.5, 0.097545],
    [0.490393, 0.5, 0.097545],
    [0.46194, -0.5, 0.191342],
    [0.46194, 0.5, 0.191342],
    [0.415735, -0.5, 0.277785],
    [0.415735, 0.5, 0.277785],
    [0.353553, -0.5, 0.353553],
    [0.353553, 0.5, 0.353553],
    [0.277785, -0.5, 0.415735],
    [0.277785, 0.5, 0.415735],
    [0.191342, -0.5, 0.46194],
    [0.191342, 0.5, 0.46194],
    [0.097545, -0.5, 0.490393],
    [0.097545, 0.5, 0.490393],
    [0.0, -0.5, 0.5],
    [0.0, 0.5, 0.5],
    [-0.097545, -0.5, 0.490393],
    [-0.097545, 0.5, 0.490393],
    [-0.191342, -0.5, 0.46194],
    [-0.191342, 0.5, 0.46194],
    [-0.277785, -0.5, 0.415735],
    [-0.277785, 0.5, 0.415735],
    [-0.353553, -0.5, 0.353553],
    [-0.353553, 0.5, 0.353553],
    [-0.415735, -0.5, 0.277785],
    [-0.415735, 0.5, 0.277785],
    [-0.46194, -0.5, 0.191342],
    [-0.46194, 0.5, 0.191342],
    [-0.490393, -0.5, 0.097545],
    [-0.490393, 0.5, 0.097545],
    [-0.5, -0.5, -0.0],
    [-0.5, 0.5, -0.0],
    [-0.490393, -0.5, -0.097545],
    [-0.490393, 0.5, -0.097545],
    [-0.46194, -0.5, -0.191342],
    [-0.46194, 0.5, -0.191342],
    [-0.415735, -0.5, -0.277785],
    [-0.415735, 0.5, -0.277785],
    [-0.353553, -0.5, -0.353553],
    [-0.353553, 0.5, -0.353553],
    [-0.277785, -0.5, -0.415735],
    [-0.277785, 0.5, -0.415735],
    [-0.191342, -0.5, -0.46194],
    [-0.191342, 0.5, 0.46194],
    [0.46194, 0.5, 0.191342],
    [0.191342, 0.5, -0.46194],
    [-0.191342, 0.5, -0.46194],
    [-0.097545, -0.5, -0.490393],
    [-0.097545, 0.5, -0.490393],
    [0.0, -0.5, -0.5],
    [0.097545, -0.5, 0.490393],
    [-0.490393, -0.5, 0.097545],
    [-0.097545, -0.5, -0.490393],
    [0.097545, 0.5, -0.490393],
    [0.0, 0.5, -0.5],
    [-0.097545, 0.5, -0.490393],
    [-0.191342, 0.5, -0.46194],
    [-0.277785, 0.5, -0.415735],
    [-0.353553, 0.5, -0.353553],
    [-0.415735, 0.5, -0.277785],
    [-0.46194, 0.5, -0.191342],
    [-0.490393, 0.5, -0.097545],
    [-0.5, 0.5, -0.0],
    [-0.490393, 0.5, 0.097545],
    [-0.46194, 0.5, 0.191342],
    [-0.415735, 0.5, 0.277785],
    [-0.353553, 0.5, 0.353553],
    [-0.277785, 0.5, 0.415735],
    [-0.097545, 0.5, 0.490393],
    [0.0, 0.5, 0.5],
    [0.097545, 0.5, 0.490393],
    [0.191342, 0.5, 0.46194],
    [0.277785, 0.5, 0.415735],
    [0.353553, 0.5, 0.353553],
    [0.415735, 0.5, 0.277785],
    [0.490393, 0.5, 0.097545],
    [0.5, 0.5, -0.0],
    [0.490393, 0.5, -0.097545],
    [0.46194, 0.5, -0.191342],
    [0.415735, 0.5, -0.277785],
    [0.353553, 0.5, -0.353553],
    [0.277785, 0.5, -0.415735],
    [0.0, 0.5, -0.5],
    [0.0, -0.5, -0.5],
    [0.097545, -0.5, -0.490393],
    [0.191342, -0.5, -0.46194],
    [0.277785, -0.5, -0.415735],
    [0.353553, -0.5, -0.353553],
    [0.415735, -0.5, -0.277785],
    [0.46194, -0.5, -0.191342],
    [0.490393, -0.5, -0.097545],
    [0.5, -0.5, -0.0],
    [0.490393, -0.5, 0.097545],
    [0.46194, -0.5, 0.191342],
    [0.415735, -0.5, 0.277785],
    [0.353553, -0.5, 0.353553],
    [0.277785, -0.5, 0.415735],
    [0.191342, -0.5, 0.46194],
    [0.0, -0.5, 0.5],
    [-0.097545, -0.5, 0.490393],
    [-0.191342, -0.5, 0.46194],
    [-0.277785, -0.5, 0.415735],
    [-0.353553, -0.5, 0.353553],
    [-0.415735, -0.5, 0.277785],
    [-0.46194, -0.5, 0.191342],
    [-0.5, -0.5, -0.0],
    [-0.490393, -0.5, -0.097545],
    [-0.46194, -0.5, -0.191342],
    [-0.415735, -0.5, -0.277785],
    [-0.353553, -0.5, -0.353553],
    [-0.277785, -0.5, -0.415735],
    [-0.191342, -0.5, -0.46194],
];

const CYL_NOR: &[[f32; 3]; 130] = &[
    [-0.0, -0.0, -1.0],
    [0.1951, -0.0, -0.9808],
    [-0.0, -0.0, -1.0],
    [0.1951, -0.0, -0.9808],
    [0.3827, -0.0, -0.9239],
    [0.3827, -0.0, -0.9239],
    [0.5556, -0.0, -0.8315],
    [0.5556, -0.0, -0.8315],
    [0.7071, -0.0, -0.7071],
    [0.7071, -0.0, -0.7071],
    [0.8315, -0.0, -0.5556],
    [0.8315, -0.0, -0.5556],
    [0.9239, -0.0, -0.3827],
    [0.9239, -0.0, -0.3827],
    [0.9808, -0.0, -0.1951],
    [0.9808, -0.0, -0.1951],
    [1.0, -0.0, -0.0],
    [1.0, -0.0, -0.0],
    [0.9808, -0.0, 0.1951],
    [0.9808, -0.0, 0.1951],
    [0.9239, -0.0, 0.3827],
    [0.9239, -0.0, 0.3827],
    [0.8315, -0.0, 0.5556],
    [0.8315, -0.0, 0.5556],
    [0.7071, -0.0, 0.7071],
    [0.7071, -0.0, 0.7071],
    [0.5556, -0.0, 0.8315],
    [0.5556, -0.0, 0.8315],
    [0.3827, -0.0, 0.9239],
    [0.3827, -0.0, 0.9239],
    [0.1951, -0.0, 0.9808],
    [0.1951, -0.0, 0.9808],
    [-0.0, -0.0, 1.0],
    [-0.0, -0.0, 1.0],
    [-0.1951, -0.0, 0.9808],
    [-0.1951, -0.0, 0.9808],
    [-0.3827, -0.0, 0.9239],
    [-0.3827, -0.0, 0.9239],
    [-0.5556, -0.0, 0.8315],
    [-0.5556, -0.0, 0.8315],
    [-0.7071, -0.0, 0.7071],
    [-0.7071, -0.0, 0.7071],
    [-0.8315, -0.0, 0.5556],
    [-0.8315, -0.0, 0.5556],
    [-0.9239, -0.0, 0.3827],
    [-0.9239, -0.0, 0.3827],
    [-0.9808, -0.0, 0.1951],
    [-0.9808, -0.0, 0.1951],
    [-1.0, -0.0, -0.0],
    [-1.0, -0.0, -0.0],
    [-0.9808, -0.0, -0.1951],
    [-0.9808, -0.0, -0.1951],
    [-0.9239, -0.0, -0.3827],
    [-0.9239, -0.0, -0.3827],
    [-0.8315, -0.0, -0.5556],
    [-0.8315, -0.0, -0.5556],
    [-0.7071, -0.0, -0.7071],
    [-0.7071, -0.0, -0.7071],
    [-0.5556, -0.0, -0.8315],
    [-0.5556, -0.0, -0.8315],
    [-0.3827, -0.0, -0.9239],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.3827, -0.0, -0.9239],
    [-0.1951, -0.0, -0.9808],
    [-0.1951, -0.0, -0.9808],
    [-0.0, -0.0, -1.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, 1.0, -0.0],
    [-0.0, -0.0, -1.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
    [-0.0, -1.0, -0.0],
];

const CYL_INDEX: &[[u32; 3]; 124] = &[
    [0, 1, 2],
    [3, 4, 1],
    [5, 6, 4],
    [7, 8, 6],
    [9, 10, 8],
    [11, 12, 10],
    [13, 14, 12],
    [15, 16, 14],
    [17, 18, 16],
    [19, 20, 18],
    [21, 22, 20],
    [23, 24, 22],
    [25, 26, 24],
    [27, 28, 26],
    [29, 30, 28],
    [31, 32, 30],
    [33, 34, 32],
    [35, 36, 34],
    [37, 38, 36],
    [39, 40, 38],
    [41, 42, 40],
    [43, 44, 42],
    [45, 46, 44],
    [47, 48, 46],
    [49, 50, 48],
    [51, 52, 50],
    [53, 54, 52],
    [55, 56, 54],
    [57, 58, 56],
    [59, 60, 58],
    [61, 62, 63],
    [64, 65, 60],
    [66, 67, 65],
    [68, 69, 70],
    [0, 3, 1],
    [3, 5, 4],
    [5, 7, 6],
    [7, 9, 8],
    [9, 11, 10],
    [11, 13, 12],
    [13, 15, 14],
    [15, 17, 16],
    [17, 19, 18],
    [19, 21, 20],
    [21, 23, 22],
    [23, 25, 24],
    [25, 27, 26],
    [27, 29, 28],
    [29, 31, 30],
    [31, 33, 32],
    [33, 35, 34],
    [35, 37, 36],
    [37, 39, 38],
    [39, 41, 40],
    [41, 43, 42],
    [43, 45, 44],
    [45, 47, 46],
    [47, 49, 48],
    [49, 51, 50],
    [51, 53, 52],
    [53, 55, 54],
    [55, 57, 56],
    [57, 59, 58],
    [59, 64, 60],
    [63, 71, 72],
    [72, 73, 74],
    [74, 75, 76],
    [76, 77, 78],
    [78, 79, 80],
    [80, 81, 82],
    [82, 83, 84],
    [84, 85, 61],
    [61, 86, 87],
    [87, 88, 89],
    [89, 90, 91],
    [91, 92, 62],
    [62, 93, 94],
    [94, 95, 96],
    [96, 97, 98],
    [98, 99, 63],
    [63, 72, 74],
    [74, 76, 78],
    [78, 80, 82],
    [82, 84, 61],
    [61, 87, 89],
    [89, 91, 62],
    [62, 94, 96],
    [96, 98, 63],
    [63, 74, 78],
    [78, 82, 61],
    [61, 89, 62],
    [62, 96, 63],
    [63, 78, 61],
    [64, 66, 65],
    [66, 100, 67],
    [70, 101, 102],
    [102, 103, 104],
    [104, 105, 106],
    [106, 107, 108],
    [108, 109, 110],
    [110, 111, 112],
    [112, 113, 114],
    [114, 115, 68],
    [68, 116, 117],
    [117, 118, 119],
    [119, 120, 121],
    [121, 122, 69],
    [69, 123, 124],
    [124, 125, 126],
    [126, 127, 128],
    [128, 129, 70],
    [70, 102, 104],
    [104, 106, 108],
    [108, 110, 112],
    [112, 114, 68],
    [68, 117, 119],
    [119, 121, 69],
    [69, 124, 126],
    [126, 128, 70],
    [70, 104, 108],
    [108, 112, 68],
    [68, 119, 69],
    [69, 126, 70],
    [70, 108, 68],
];


pub fn make_cyl(
    server_state: &mut ServerState,
    tf: glm::Mat4,
    material: MaterialReference,
) -> GeometryReference {
    let normal_tf = glm::inverse_transpose(glm::mat4_to_mat3(&tf));

    let verts: Vec<_> = CYL_POS
        .iter()
        .zip(CYL_NOR)
        .map(|f| VertexMinimal {
            position: transform_p(*f.0, &tf),
            normal: transform_n(*f.1, &normal_tf),
        })
        .collect();

    let index_list = IndexType::Triangles(CYL_INDEX);

    let test_source = VertexSource {
        name: Some("Cyl".to_string()),
        vertex: verts.as_slice(),
        index: index_list,
    };

    let pack = test_source.pack_bytes().unwrap();

    // Return a new mesh with this geometry/material
    test_source
        .build_geometry(
            server_state,
            BufferRepresentation::Bytes(pack.bytes),
            material,
        )
        .unwrap()
}

const BUS_POS: &[[f32; 3]; 83] = &[
    [0.35877246,-0.54075056,-0.5993121],
    [0.61117756,-0.41339296,-0.36831072],
    [0.12337985,-0.41216674,-0.7065221],
    [-0.123398125,0.4118909,-0.706521],
    [-0.14940812,-0.55476594,-0.6783546],
    [-0.36674276,-0.4167648,-0.6149793],
    [-0.33549827,-0.57112765,-0.59062105],
    [-0.6093925,-0.4173283,-0.37038115],
    [-0.5860403,-0.5744981,-0.33336657],
    [-0.70049375,-0.41217217,-0.12443191],
    [-0.64565897,-0.6018819,-0.12534483],
    [-0.67182976,-0.55926824,0.13732918],
    [-0.61117756,-0.41339296,0.36831072],
    [-0.5824973,-0.5755204,0.33786267],
    [-0.3642626,-0.7430037,0.36957046],
    [-0.43862563,-0.7862677,0.13489515],
    [-0.3359502,-0.572489,0.58975977],
    [-0.12958774,-0.7863289,0.44246122],
    [0.12796062,-0.60297215,0.6503328],
    [0.13710324,-0.782906,0.44172743],
    [0.33549827,-0.57112765,0.59062105],
    [0.36597174,-0.74204296,0.3690983],
    [0.5860403,-0.5744981,0.33336657],
    [0.6711185,-0.55960035,0.13656873],
    [0.44454566,-0.78124154,0.13764247],
    [0.646975,-0.5995768,-0.13025953],
    [0.5824973,-0.5755204,-0.33786267],
    [0.3642626,-0.7430037,-0.36957046],
    [0.4328013,-0.7875067,-0.14085361],
    [0.12426663,-0.6018325,-0.65124613],
    [0.13578287,-0.78805506,-0.43562275],
    [-0.13062108,-0.78050095,-0.44959822],
    [-0.36597174,-0.74204296,-0.3690983],
    [-0.43840885,-0.78269666,-0.1439176],
    [-0.12745701,-0.8901343,-0.025503924],
    [0.12745701,-0.8901343,0.025503924],
    [0.70049286,-0.411881,-0.12446839],
    [0.70049286,0.411881,0.12446839],
    [0.6093925,-0.4173283,0.37038115],
    [0.12337985,-0.41216674,0.7065221],
    [0.6703175,0.5662049,-0.13524923],
    [0.6129504,0.41498578,0.3646629],
    [0.36345565,0.4128648,0.61727405],
    [0.1322595,0.56532335,0.67665225],
    [-0.123370044,0.41217467,0.706522],
    [-0.36431593,0.41550505,0.6167742],
    [-0.33546427,0.57202584,0.5903513],
    [-0.5833083,0.5742854,0.33740404],
    [-0.61095554,0.41358072,0.3683655],
    [-0.6477191,0.5963136,0.1357773],
    [-0.70049286,0.411881,0.12446839],
    [-0.6732232,0.560115,-0.14303067],
    [-0.6129504,0.41498578,-0.3646629],
    [-0.36345565,0.4128648,-0.61727405],
    [0.13082324,0.5658537,-0.67589194],
    [-0.13270047,0.5954474,-0.65390825],
    [0.33546427,0.57202584,-0.5903513],
    [0.36431593,0.41550505,-0.6167742],
    [0.5833083,0.5742854,-0.33740404],
    [0.61095554,0.41358072,-0.3683655],
    [0.6483007,0.5954969,0.13384758],
    [0.44190195,0.7829557,0.13917418],
    [0.43309465,0.78720385,-0.13957207],
    [0.5824973,0.5755204,0.33786267],
    [0.3642626,0.7430037,0.36957046],
    [0.3393395,0.5734445,0.5867483],
    [0.14028078,0.78418434,0.4398595],
    [-0.12742808,0.78490573,0.44485512],
    [-0.12787898,0.5980706,0.6525052],
    [-0.36514318,0.74176264,0.37078556],
    [-0.4395714,0.7856,0.13325927],
    [-0.1278657,0.8911858,0.0024526569],
    [-0.43600342,0.78412324,-0.14546312],
    [-0.3642626,0.7430037,-0.36957046],
    [-0.13405205,0.7824655,-0.44670516],
    [0.13402994,0.7869761,-0.43761468],
    [0.1278657,0.8911858,-0.0024526569],
    [0.36514318,0.74176264,-0.37078556],
    [-0.3393395,0.5734445,-0.5867483],
    [-0.5824973,0.5755204,-0.33786267],
    [-0.3635294,-0.41524774,0.61742115],
    [-0.14633793,-0.5533812,0.6792714],
    [0.36674276,-0.4167648,0.6149793],
];

const BUS_NOR: &[[f32; 3]; 83] = &[
    [0.50458556,-0.3609054,-0.784309],
    [0.8360589,-0.1100239,-0.5374944],
    [0.16317745,-0.10609806,-0.9808754],
    [-0.14763471,0.11129605,-0.9827601],
    [-0.18156701,-0.39300436,-0.9014328],
    [-0.53628737,-0.10484461,-0.83749837],
    [-0.47871608,-0.47367883,-0.73922884],
    [-0.83381844,-0.121456936,-0.5385118],
    [-0.7585909,-0.46454832,-0.45687506],
    [-0.9823681,-0.11390194,-0.1482541],
    [-0.83335406,-0.53211486,-0.14958182],
    [-0.9018576,-0.3977108,0.1687571],
    [-0.84589154,-0.107629254,0.5223827],
    [-0.7443327,-0.4760062,0.46838763],
    [-0.4238934,-0.79985017,0.42491665],
    [-0.485664,-0.8609563,0.15127751],
    [-0.47759423,-0.47510657,0.7390383],
    [-0.1383737,-0.8701687,0.47292626],
    [0.15515432,-0.53752434,0.82885146],
    [0.15095337,-0.8713417,0.4668799],
    [0.46883985,-0.4603513,0.7538341],
    [0.4206611,-0.80333275,0.42154554],
    [0.7491783,-0.47466472,0.46197975],
    [0.90262866,-0.39672303,0.16695005],
    [0.4970825,-0.85366344,0.15545979],
    [0.83578014,-0.5260573,-0.15727532],
    [0.75687224,-0.47046968,-0.4536549],
    [0.42359877,-0.79383045,-0.4363456],
    [0.47271,-0.86715335,-0.15681306],
    [0.15497975,-0.5437856,-0.8247901],
    [0.14951548,-0.8745973,-0.46122104],
    [-0.14368294,-0.86267555,-0.48491892],
    [-0.42007247,-0.80376655,-0.42130575],
    [-0.48124295,-0.86115444,-0.16376346],
    [-0.12805133,-0.99136597,-0.028221717],
    [0.12769769,-0.9913849,0.02914212],
    [0.9827214,-0.112261474,-0.14716008],
    [0.9831106,0.110359155,0.1459948],
    [0.84452325,-0.11032828,0.52403075],
    [0.15246454,-0.11462797,0.98163897],
    [0.89553845,0.4133052,-0.16489302],
    [0.83850694,0.1199849,0.53151655],
    [0.5239774,0.10409794,0.84534687],
    [0.16623574,0.41346464,0.8952166],
    [-0.14796704,0.112965874,0.98251945],
    [-0.5412153,0.11746262,0.8326396],
    [-0.46864215,0.460866,0.75364256],
    [-0.7549878,0.4630117,0.46434233],
    [-0.8359861,0.119357824,0.5356127],
    [-0.8375398,0.52138096,0.16336842],
    [-0.98238564,0.11056462,0.15064524],
    [-0.89878345,0.4041264,-0.16991247],
    [-0.84531236,0.10606942,-0.52363753],
    [-0.5394498,0.11621372,-0.8339594],
    [0.164019,0.41495153,-0.8949375],
    [-0.16436276,0.52197856,-0.8369727],
    [0.47327685,0.46987164,-0.74513733],
    [0.5236809,0.10416727,-0.8455221],
    [0.74502194,0.47364464,-0.46968418],
    [0.8471308,0.10742821,-0.520412],
    [0.8394922,0.5188264,0.16146867],
    [0.48895225,0.8586975,0.15350682],
    [0.47916996,0.8631141,-0.15946853],
    [0.75418514,0.4637632,0.46489623],
    [0.42223614,0.80169106,0.42309374],
    [0.4800245,0.4703119,0.740529],
    [0.14601465,0.87042177,0.47015494],
    [-0.13495144,0.8729623,0.46874842],
    [-0.15782475,0.53004104,0.83315533],
    [-0.41962287,0.80476093,0.41985294],
    [-0.4829494,0.86248016,0.15128735],
    [-0.12707083,0.99188626,0.0038397138],
    [-0.48691618,0.8585378,-0.16070347],
    [-0.42206374,0.8020086,-0.42266375],
    [-0.13957727,0.86946994,-0.47385672],
    [0.14192276,0.8733971,-0.46587077],
    [0.12678207,0.99192715,-0.0026146572],
    [0.42101067,0.80352736,-0.42082545],
    [-0.47509184,0.46040437,-0.7498771],
    [-0.73971456,0.47723132,-0.47441825],
    [-0.5325671,-0.104422726,0.83992153],
    [-0.17792372,-0.39240554,0.90241957],
    [0.5434396,-0.11773831,0.8311504],
];

const BUS_INDEX: &[[u32; 3]; 162] = &[
    [2,57,0],
[4,6,5],
[10,11,9],
[14,13,15],
[20,21,22],
[27,26,28],
[33,32,34],
[31,34,32],
[34,15,33],
[24,21,35],
[19,35,21],
[27,0,26],
[36,37,23],
[82,38,42],
[5,7,53],
[39,42,43],
[9,50,51],
[2,3,54],
[54,56,57],
[64,63,61],
[70,69,71],
[67,71,69],
[73,78,79],
[62,76,61],
[73,79,72],
[64,65,63],
[58,77,62],
[58,62,40],
[56,77,58],
[47,69,70],
[47,70,49],
[46,69,47],
[43,68,44],
[40,60,37],
[39,44,81],
[16,81,80],
[22,23,38],
[14,16,13],
[7,9,52],
[6,32,8],
[29,4,2],
[0,1,26],
[1,57,59],
[36,59,40],
[62,77,76],
[75,76,77],
[3,5,53],
[2,4,3],
[7,6,8],
[9,8,10],
[16,17,81],
[13,12,11],
[13,11,15],
[17,18,81],
[20,19,21],
[0,30,29],
[24,23,22],
[21,24,22],
[26,25,28],
[31,29,30],
[17,35,19],
[28,24,35],
[34,30,35],
[37,38,23],
[25,36,23],
[1,59,36],
[46,48,45],
[36,40,37],
[42,38,41],
[39,43,44],
[47,50,48],
[56,59,57],
[51,50,49],
[52,9,51],
[53,7,52],
[54,3,55],
[60,62,61],
[40,59,58],
[65,66,43],
[63,60,61],
[68,66,67],
[74,72,71],
[71,75,74],
[75,55,74],
[78,74,55],
[72,49,70],
[79,51,72],
[66,71,67],
[71,72,70],
[66,61,76],
[75,56,54],
[78,3,53],
[52,78,53],
[67,46,68],
[46,44,68],
[41,65,42],
[37,63,41],
[12,45,48],
[80,44,45],
[20,39,18],
[39,82,42],
[24,25,23],
[18,39,81],
[38,20,22],
[17,15,34],
[15,10,33],
[50,12,48],
[6,31,32],
[9,11,50],
[33,10,8],
[32,33,8],
[36,26,1],
[0,29,2],
[30,28,35],
[12,16,80],
[2,54,57],
[79,52,51],
[43,42,65],
[1,0,57],
[3,4,5],
[7,5,6],
[9,7,8],
[16,14,17],
[17,19,18],
[20,18,19],
[0,27,30],
[31,4,29],
[17,34,35],
[34,31,30],
[37,41,38],
[46,47,48],
[47,49,50],
[56,58,59],
[60,40,62],
[65,64,66],
[68,43,66],
[74,73,72],
[71,76,75],
[75,54,55],
[78,73,74],
[72,51,49],
[66,76,71],
[66,64,61],
[75,77,56],
[78,55,3],
[52,79,78],
[67,69,46],
[46,45,44],
[41,63,65],
[37,60,63],
[12,80,45],
[80,81,44],
[20,82,39],
[24,28,25],
[38,82,20],
[17,14,15],
[15,11,10],
[50,11,12],
[6,4,31],
[36,25,26],
[30,27,28],
[12,13,16],
];

pub fn make_bus(
    server_state: &mut ServerState,
    tf: glm::Mat4,
    material: MaterialReference,
) -> GeometryReference {
    let normal_tf = glm::inverse_transpose(glm::mat4_to_mat3(&tf));

    let verts: Vec<_> = BUS_POS
        .iter()
        .zip(BUS_NOR)
        .map(|f| VertexMinimal {
            position: transform_p(*f.0, &tf),
            normal: transform_n(*f.1, &normal_tf),
        })
        .collect();

    let index_list = IndexType::Triangles(BUS_INDEX);

    let test_source = VertexSource {
        name: Some("Bus".to_string()),
        vertex: verts.as_slice(),
        index: index_list,
    };

    let pack = test_source.pack_bytes().unwrap();

    // Return a new mesh with this geometry/material
    test_source
        .build_geometry(
            server_state,
            BufferRepresentation::Bytes(pack.bytes),
            material,
        )
        .unwrap()
}